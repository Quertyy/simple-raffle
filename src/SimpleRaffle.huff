// Imports
#include "huffmate/auth/NonPayable.huff"
#include "huffmate/data-structures/Hashmap.huff"

/* Interface */
#define function enter() payable returns ()

#define function createRaffle() nonpayable returns ()
#define function drawWinner() nonpayable returns ()

#define function winnerOf(uint256) view returns (address)
#define function totalPrizeOf(uint256) view returns (uint256)

#define function userTicketsQuantity(address,uint256) view returns (uint256)
#define function raffleTicketsQuantity(uint256) view returns (uint256)

#define function owner() view returns (address)
#define function price() view returns (uint256)
// Events
#define event registered(address indexed,uint256)
#define event drawn(address indexed,uint256,uint256)

// ****** Storage Slots ****** \\
// owner
#define constant OWNER = FREE_STORAGE_POINTER()
// current raffle Id
#define constant RAFFLE_ID = FREE_STORAGE_POINTER()
// max tickets per raffle for a single user
#define constant MAX_USER_TICKETS = FREE_STORAGE_POINTER()
// max tickets per raffle
#define constant MAX_TICKETS = FREE_STORAGE_POINTER()
// current tickets count for a given raffle
#define constant RAFFLE_STRUCT = FREE_STORAGE_POINTER()
// current user's tickets count for a given raffle
#define constant USER_MAP = FREE_STORAGE_POINTER()
// users registered for a given raffle
#define constant PARTICIPANTS = FREE_STORAGE_POINTER()
// price = 0.5 ether
#define constant PRICE = FREE_STORAGE_POINTER()

#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller
    [OWNER] sload
    eq
    is_owner jumpi
    0x00 0x00 revert
    is_owner:
}

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    caller [OWNER] sstore      // []
    0x01 [RAFFLE_ID] sstore  // []
    0x5f [MAX_TICKETS] sstore
    0x03 [MAX_USER_TICKETS] sstore
    0x6f05b59d3b20000 [PRICE] sstore
}

#define macro GET_OWNER() = takes (0) returns (0) {
    // Load value from storage.
    [OWNER]         // [OWNER_PTR]
    sload                // [address]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro GET_PRICE() = takes (0) returns (0) {
    [PRICE] sload
    0x00 mstore

    0x20 0x00 return
}
// struct raffleInfo slot1
// uint88 totalPrize        uint8 ticketsCount              address winner
// 0003000000000000000000         08            019f82740818b6f37B7175de42702FE9359ea7Da


// struct raffleInfo slot2
// 
// 0x019f82740818b6f37B7175de42702FE9359ea7Da
/// @notice Enter raffle
/// @notice Payable function that register an user to the current raffle.
#define macro ENTER() = takes (0) returns (0) {
    // check if tickets qty + raffle current registration count is less than maxTickets
    0x04 calldata                               // [qty]
    [RAFFLE_ID] sload                           // [raffleId, qty]
    dup1                                        // [raffleId, raffleId, qty]
    [RAFFLE_STRUCT]                             // [raffleSlot, raffleId, raffleId, qty]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [raffleInfo[raffleId]]
    // 

    maxRaffleTickets:
        0x00 0x00 revert            // []

    notEnoughEth:
        0x00 0x00 revert            // []
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xe0 shr // [sig]
    // Input Stack: [function_selector]
    dup1 __FUNC_SIG(enter)                  eq enterJump                    jumpi
    dup1 __FUNC_SIG(createRaffle)           eq createRaffleJump             jumpi
    dup1 __FUNC_SIG(drawWinner)             eq drawWinnerJump               jumpi

    dup1 __FUNC_SIG(winnerOf)               eq winnerOfJump                 jumpi
    dup1 __FUNC_SIG(totalPrizeOf)           eq totalPrizeOfJump             jumpi

    dup1 __FUNC_SIG(userTicketsQuantity)    eq userTicketsQuantityJump      jumpi
    dup1 __FUNC_SIG(raffleTicketsQuantity)  eq raffleTicketsQuantityJump    jumpi

    dup1 __FUNC_SIG(owner)                  eq ownerJump                    jumpi
    dup1 __FUNC_SIG(price)                  eq priceJump                    jumpi
    no_match jump

    enterJump:
        //ENTER()
    createRaffleJump:
        //CREATE_RAFFLE()
    drawWinnerJump:
        //DRAW_WINNER()
    winnerOfJump:
        //WINNER_OF()
    totalPrizeOfJump:
        //TOTAL_PRIZE_OF()
    userTicketsQuantityJump:
        //USER_TICKETS_QUANTITY()
    raffleTicketsQuantityJump:
        //RAFFLE_TICKETS_QUANTITY()
    ownerJump:
        GET_OWNER()
    priceJump:
        GET_PRICE()

    no_match:
}